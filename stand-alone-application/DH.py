import hashlib
import ssl
import binascii
import os

global generator
global prime
global key_length

prime = 0x
generator = 2
key_length = 600


def generate_private_key(length):
		
	_rand = 0
	_bytes = length // 8 + 8
	while (_rand.bit_length() < length):
		hex_key = binascii.b2a_hex(os.urandom(_bytes))
		_rand = int(hex_key.encode('hex'),16)
	private_key = _rand
	return private_key

def generate_public_key(private_key):
	public_key = pow(generator, private_key, prime)
	return public_key



def generate_secret(private_key, public_key):
    prime = 324655201320946529188557691838483227882748563398767893235568008953648593822588334237936360302893002686412447506175897248466832819633504957323739445621438138855594406276821567658461120889559160225944096790219365223347645123491900315291535446114929929438288741284520587560977434491000434042952327940141145793557759676747464609243690213043798293527791474669772518531261024945045564460232172829298779426355974130508154295052964642410917564376862365685117549782145768909453704490574953597365360195582234482462609859783995195306403666635321920963316887875564617727773331585002405662482004647696860185850410478624406686205393627624191250673743962509604080441421187455654837684213574645818135062892118461873138009840339270758656363907008074631656257260885667312699596350861947123477180707996314019944110583894473670823757686882859119159837372297459824314825353100855849365620942127656896758286533181714193294669587176098453948256097914401872959795135511527160350748599683517059000520092460633657872263650065241185756575888678848106948569472004096243011598004116923338900463898963795498834506787442057344175267347340587113623576906472465566528522893605112377428699614732516876001345274301505280429993631269331251544700245800259296755518523899561985619341645254269399838313632951228863555252969134932771732309427478104229715581343450638183616305237575420920281937767844086290629545791315115315072355782281630406974438567220657176338401087387594256167991261105496610139546814335688396013888204691705141359323294310957719627071163931229175433790635744005118660448713853055178562379816709336307838775714969436936239677396284009185393040910806616381060503062132264350158778932823180831158277513050664517442350477773276667120448245773397317217208621560029689690083279628893922655072908094321600356752059184557725118704581100246181903062693285134506052160431370937488136115367016176127686130312060532553472218869781783280783568988559062785572606332264378002050203137579223200790163527771996187863564342890405246784926241775595274211149446999951958457283825920822474109457681287097453515368367673969109322753609120425845549656243619302072293275812346318744998513926285734604636398187150509237968161030405577600581376448171158729647254937349301820452905853595658051147393599354572894936700768251467728125580711531783063347808485140852225585712883874632564936245570724116339842432530637541960494310159635763265815457365416859909553810462808921358549875237471405564815239340162161426449
    shared_secret = pow(public_key, private_key, prime)
    secret_bytes = shared_secret.to_bytes((shared_secret.bit_length() + 7) // 8, byteorder='big')
    secret_hex = secret_bytes.hex()
    return secret_hex